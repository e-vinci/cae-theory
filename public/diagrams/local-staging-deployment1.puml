@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

!include <C4/C4_Deployment>
!include <tupadr3/common>
!include <tupadr3/font-awesome/server>
!include <tupadr3/font-awesome/database>
!include <tupadr3/font-awesome/users>
!include <tupadr3/font-awesome/laptop>
!include <tupadr3/devicons/react>
!include <tupadr3/devicons/postgresql>
!include <tupadr3/devicons/java>
!include <tupadr3/devicons/docker>
!include <tupadr3/devicons/chrome>
!include <tupadr3/devicons/java>
!include <tupadr3/font-awesome/gitlab>

!define AzurePuml https://raw.githubusercontent.com/plantuml-stdlib/Azure-PlantUML/release/2-2/dist
!include AzurePuml/AzureCommon.puml
!include AzurePuml/Storage/AzureBlobStorage.puml
!include AzurePuml/Storage/AzureStorageContainer.puml
!include AzurePuml/Storage/AzureStorage.puml
!include AzurePuml/Web/AzureWebApp.puml

LAYOUT_TOP_DOWN()

title Local staging Environment : C4 Deployment Diagram

Node(docker_host, "Docker Host") {
    Node(docker_compose, "Docker Compose Network", "Configuration", "Configure and manage containers",  $sprite=docker) {

        Node(nginxContainer, "Reverse proxy", "nginx:alpine", "Handles all requests", $sprite=docker) {
            Container(nginx, "Reverse proxy", "Nginx", "Handles all requests", $sprite=nginx)
        }


        Node(frontContainer, "Front container", "nginx:alpine", "Host the front", $sprite=docker) {
            Container(frontend, "Frontend", "HTML/JS/CSS", "The main UI that the customer interacts with", $sprite=react)
        }
        Node(apiContainer, "API container", "eclipse-temurin:21-jre-jammy", "Runs the API", $sprite=docker) {
            Container(api, "API", "Spring Boot", "Handles all business logic", $sprite=img:https://upload.wikimedia.org/wikipedia/commons/7/79/Spring_Boot.svg{scale=0.5})
        }


    }
}

 Node(dbContainer, "Postgres", "Vinci Hosting or \nAzure DB for PostgreSQL", "Runs the db") {
    ContainerDb(db, "Database", "PostgreSQL", "Holds pizzeria's information", $sprite=postgresql)
}

 System_Boundary(external, "External Systems") {
         System(browser, "Browser", "HTML/JS/CSS", $sprite=chrome)
    
}

Rel(browser, nginx, "Requests Files", "HTTP")
Rel(browser, nginx, "Makes API calls", "HTTP")
Rel(nginx, frontend, "Forwards requests to", "https")
Rel(nginx, api, "Forwards /api requests to", "https")
Rel(api, db, "Reads/Writes", "JDBC")

@enduml